// 备份主目录
def bakPath = file("${project.projectDir}/bakApk/")
// 备份目录名称
def backDir = "${bakPath}/${baseApkDir}"
//文件名
def appName = "${versionName}"
def tinkerBuildId = new Date().format("MMddHHmmss")
def tinkerOutId = "${versionName}.${versionCode}-${tinkerBuildId}"
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${backDir}/${appName}.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${backDir}/${appName}-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${backDir}/${appName}-R.txt"

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${backDir}/${appName}"

    outTinkerId = "${tinkerOutId}"
}

def getOldApkPath() {
    return ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return ext.outTinkerId
}

def buildWithTinker() {
    return ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

android {
    defaultConfig {
        buildConfigField "String", "TINKER_ID", "\"${tinkerOutId}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        ignoreWarning = true

        /**
         * optional，default 'true'
         * whether sign the patch file
         * if not, you must do yourself. otherwise it can't check success during the patch loading
         * we will use the sign config with your build type
         */
        useSign = true

        /**
         * optional，default 'true'
         * whether use tinker to build
         */
        tinkerEnable = buildWithTinker()

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
            /**
             * optional，default 'null'
             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
             * apk mapping file if minifyEnabled is enable!
             * Warning:
             * you must be careful that it will affect the normal assemble build!
             */
            applyMapping = getApplyMappingPath()
            /**
             * optional，default 'null'
             * It is nice to keep the resource id from R.txt file to reduce java changes
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * necessary，default 'null'
             * because we don't want to check the base apk with md5 in the runtime(it is slow)
             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
             * we can use git rev, svn rev or simply versionCode.
             * we will gen the tinkerId in your manifest automatic
             */
            tinkerId = getTinkerIdValue()

            /**
             * if keepDexApply is true, class in which dex refer to the old apk.
             * open this can reduce the dex diff file size.
             */
            keepDexApply = false

            /**
             * optional, default 'false'
             * Whether tinker should treat the base apk as the one being protected by app
             * protection tools.
             * If this attribute is true, the generated patch package will contain a
             * dex including all changed classes instead of any dexdiff patch-info files.
             */
            isProtectedApp = true

            /**
             * optional, default 'false'
             * Whether tinker should support component hotplug (add new component dynamically).
             * If this attribute is true, the component added in new apk will be available after
             * patch is successfully loaded. Otherwise an error would be announced when generating patch
             * on compile-time.
             *
             * <b>Notice that currently this feature is incubating and only support NON-EXPORTED Activity</b>
             */
            supportHotplugComponent = true
        }

        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"

            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
            loader = []
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/*/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             * andresguard 混淆需要添加“r/*“
             */
            pattern = ["res/*",  "r/*","assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")
            /**
             * patch version via packageConfig
             */
            configField("patchVersion", "1.0")
        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:${ANDRESGUARD_VERSION}"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }

    project.afterEvaluate {
        /**
         * bak apk and mapping
         */
        android.applicationVariants.all { variant ->
            /**
             * task type, you want to bak
             */
            def taskName = variant.name
            def versionName = variant.versionName

            // find resguard task first
            def resguardTask = project.tasks.findByName("resguard${taskName.capitalize()}")
            if (resguardTask == null) {
                println("resguardTask not found, just return")
                return
            }

            def tinkerPatchTask = project.tasks.findByName("tinkerPatch${taskName.capitalize()}")
            if (tinkerPatchTask == null) {
                println("resguardTask not found, just return")
                return
            }
            tinkerPatchTask.doFirst {
                def buildApkPath = "${buildDir}/outputs/apk/${taskName}/AndResGuard_${project.getName()}-${taskName}-${versionName}/${project.getName()}-${taskName}-${versionName}_7zip_aligned_signed.apk"
                println("change tinkerPatchTask buildApkPath to resugurad output ${buildApkPath}")
                tinkerPatchTask.buildApkPath = buildApkPath
            }
            tinkerPatchTask.dependsOn resguardTask
            resguardTask.doLast {
                copy {
                    def bakResguardDir = bakPath.absolutePath + "/${tinkerOutId}"
                    from "${buildDir}/outputs/apk/${taskName}/AndResGuard_${project.getName()}-${taskName}-${versionName}/${project.getName()}-${taskName}-${versionName}_7zip_aligned_signed.apk"
                    into file(bakResguardDir)
                    rename { String fileName ->
                        fileName.replace("${project.getName()}-${taskName}-${versionName}_7zip_aligned_signed.apk", "${versionName}.apk")
                    }

                    from "${buildDir}/outputs/mapping/${taskName}/mapping.txt"
                    into file(bakResguardDir)
                    rename { String fileName ->
                        fileName.replace("mapping.txt", "${versionName}-mapping.txt")
                    }

                    from "${buildDir}/intermediates/symbols/${taskName}/R.txt"
                    into file(bakResguardDir)
                    rename { String fileName ->
                        fileName.replace("R.txt", "${versionName}-R.txt")
                    }
                    from "${buildDir}/outputs/apk/${taskName}/AndResGuard_${project.getName()}-${taskName}/resource_mapping_${project.getName()}-release.txt"
                    into file(bakResguardDir)
                    rename { String fileName ->
                        fileName.replace("resource_mapping_${project.getName()}-release.txt", "${versionName}-resource_mapping.txt")
                    }
                }
            }
            tinkerPatchTask.doLast {
                copy {
                    def patchApkPath = "${buildDir}/outputs/apk/tinkerPatch/${taskName}/patch_signed_7zip.apk"
                    println("change tinkerPatchTask patchApkPath to resugurad output ${patchApkPath}")
                    from patchApkPath
                    into file(backDir)
                    rename { String fileName ->
                        fileName.replace("patch_signed_7zip.apk", "${tinkerOutId}.apk")
                    }
                    // 删除打patch包时候产生的新基线包
                    def delBackDir = "${bakPath}/${tinkerOutId}"
                    println("delete new tinker patch baseApkPath :${delBackDir}")
                    delete delBackDir
                }
            }
        }
    }
}
